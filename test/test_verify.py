import unittest
import json
import time
import random

from ethsnarks.verifier import VerifyingKey, Proof
from ethsnarks.deploy import genWitness, tree_depth
from ethsnarks.helpers import initMerkleTree
from ethsnarks.utils import genMerkelTree, sha256


VK_FILENAME = 'zksnark_element/vk.json'


class VerifyTests(unittest.TestCase):
    def test_load(self):
        vk = VerifyingKey.from_file(VK_FILENAME)
        print(vk)

    def test_gen_verify(self):
        proof_data = {
            'a': [18167844061083599918063288666294101248253199287950695731240358336918838305018, 10241825603101019353002743155634618662036688111197996236291762745398647995862, 1],
            'a_p': [12570360906049291659309571510689910537041156360067489013338084196029251447934, 3466323414020066578400095489608699943137167872781823839747589207079974203688, 1],
            'b': [2176926483688270737604805316604149338548240493746606043711627318561627294738, 4335753396000479850511244511395459655604643962993127739109076544960626016058, 6733379360687434701495634533645959788516357809577212658549681841828052113963, 7936470743960650903017393429910639797545189564045419640593553489332135223906, 0, 1],
            'b_p': [16769008975201133476648041560289887241866338108785821291102338541360737042800, 5644956521914427968984478082961817470666110585079134497739548669924511474075, 1],
            'c': [21175584686540814103479154894534317987085415408247815366210437194621944145080, 19662096721619806332801895764711771157242397016925750958943843278173627385771, 1],
            'c_p': [18761065105593952415337931651711190822646210547513293189851213928139221189869, 10498868549172461353203981501768797948449312519565676128244697366554857769264, 1],
            'h': [7506617175864183819008563288647564484666401936797280615735405944079950091936, 5551761681692963087798266146404949283148127447982818662339717524893445097689, 1],
            'k': [13170232865053269078754322404977285426316474392809757377300543966353528326933, 18606554328595638401997637835226547440421716066371323919411532185442092562192, 1],
            'input': [2358235225661717530636771417470733200693438604688419055500080865151520192581, 5512033898681312005187940749782987330584814391267830782270023330255364991803, 10276834431326452002635399376907554048525908255311302562092767574638630303104, 2180696616216409247689200496639230283011081707939876815392327524740245903781, 11755380735295502670160792306623150293468016981762240503883479157317375357843, 18271]
        }
        proof = Proof.from_dict(proof_data)
        vk = VerifyingKey.from_file(VK_FILENAME)
        vk.verify(proof)
        print(proof)

        """
        pk_output = "zksnark_element/pk.raw"
        vk_output = "zksnark_element/vk.json"
        leaves, nullifiers, sks = initMerkleTree(2) 
        root, layers = genMerkelTree(tree_depth, leaves)
        signal_variables = sha256(str(1))
        external_nullifier = sha256("nomimatedSpokesPerson"+root+str(time.time()))
        signal1 = sha256({"NomimatedSpokesPersonFor":root , "candidate": "Candidate1" })
        proof = None
        for address, (nullifier , sk) in enumerate(zip(nullifiers, sks)):
            rand = int(random.uniform(1, 3)) 
            print("Generating witness")
            proof, proof_root = genWitness(leaves, nullifier, sk, signal1 , signal_variables, external_nullifier, address, tree_depth, 0, "zksnark_element/pk.raw", True)
            print("Proof is", proof)
            break
        """

if __name__ == "__main__":
    unittest.main()
